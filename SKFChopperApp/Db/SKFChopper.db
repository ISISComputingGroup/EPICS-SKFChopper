# DB file for SKF Magnetic Bearing Controller MB4160g5-PC

#--------------------------------------------------
# Name

record(stringout, "$(P)NAME") {
    field(DESC, "Chopper/disk controller attached to")
    field(DTYP, "Soft Channel")
    field(VAL, "$(NAME)")
    info(INTEREST, "HIGH")
    info(archive, "VAL")
}  

#--------------------------------------------------
# State

record(mbbi, "$(P)STATE") {
    field(DESC, "System State")
    field(DTYP, "asynInt32")
    field(INP, "@asyn($(CHOP)state,0)UINT16")
    field(SCAN, "I/O Intr")
    field(SIML, "$(P)SIM")
    field(SIOL, 0)
	field(ZRVL, 0)
	field(ONVL, 1)
	field(TWVL, 2)
	field(THVL, 3)
	field(FRVL, 4)
	field(FVVL, 5)
	field(SXVL, 6)
	field(SVVL, 7)
	field(EIVL, 8)
	field(NIVL, 9)
	field(TEVL, 10)
	field(ELVL, 11)
	field(ZRST, "Invalid")
	field(ONST, "Power Up")
	field(TWST, "Standby")
	field(THST, "Idle")     
	field(FRST, "Deleving")
	field(FVST, "Levitating")
	field(SXST, "Starting")
	field(SVST, "Stopping")
	field(EIST, "Coast")
	field(NIST, "Rotation")
	field(TEST, "Levitated")
	field(ELST, "Rotating")
    field(SDIS, "$(P)DISABLE")
    info(INTEREST, "HIGH")
    info(archive, "VAL")
}

#--------------------------------------------------
# Status Register

record(mbbiDirect, "$(P)_STATUS") {
    field(DESC, "Consolidated Status Register")
    field(DTYP, "asynUInt32Digital")
    field(INP, "@asynMask($(CHOP)status,0,0xFFFF)")
    field(SCAN, "I/O Intr")
    field(SIML, "$(P)SIM")
    field(SIOL, "$(P)SIM:_STATUS")
    field(SDIS, "$(P)DISABLE")
	info(INTEREST, "LOW")
    info(archive, "VAL")    
}

record(bi, "$(P)STATUS:WARN") {
    field(DESC, "Warning Detected")
    field(DTYP, "Soft Channel")
    field(INP, "$(P)_STATUS.B0 CP")
	field(ZNAM, "NO")
	field(ONAM, "YES")
    info(INTEREST, "HIGH")
    info(archive, "VAL")
}
 
record(bi, "$(P)STATUS:TRIP") {
    field(DESC, "Trip Detected")
    field(DTYP, "Soft Channel")
    field(INP, "$(P)_STATUS.B1 CP")
	field(ZNAM, "NO")
	field(ONAM, "YES")
    info(INTEREST, "HIGH")
    info(archive, "VAL")
} 

record(bi, "$(P)PHAS:LOCK") {
    field(DESC, "Phase locked")
    field(DTYP, "Soft Channel")
    field(INP, "$(P)_STATUS.B5 CP")
	field(ZNAM, "NO")
	field(ONAM, "YES")
    info(INTEREST, "HIGH")
    info(archive, "VAL")
} 

#--------------------------------------------------
# Shaft Angle

# 1/100 of a degree
record(longin, "$(P)_SHAFTANG100") {
    field(DESC, "Shaft Angle in hundredths of degrees")
    field(DTYP, "asynInt32")
    field(INP, "@asyn($(CHOP)shaftang,0)UINT16")
    field(SCAN, "I/O Intr")
    field(SIML, "$(P)SIM")
#    field(SIOL, "$(P)SIM:SHAFTANG")
    field(SDIS, "$(P)DISABLE")
    field(EGU, "degree")
    field(FLNK, "$(P)SHAFTANG")
    info(INTEREST, "LOW")
    info(archive, "VAL")
}

record(calc, "$(P)SHAFTANG") {
	field(DESC, "Shaft Angle")
    field(SCAN, "Passive")
	field(INPA, "$(P)_SHAFTANG100")
	field(CALC, "(A / 100)")
    field(PREC, 2)
    field(EGU, "degree")
    info(INTEREST, "HIGH")
    info(archive, "VAL")
}

#--------------------------------------------------
# Homing

record(ai, "$(P)HOMEANG:SP:RBV") {
    field(DESC, "Home Angle setpoint readback")
    field(DTYP, "asynFloat64")
    field(INP, "@asyn($(CHOP)homeangsp,0)FLOAT32_LE")
    field(SCAN, "I/O Intr")
    field(SIML, "$(P)SIM")
    field(SIOL, "$(P)SIM:HOMEANG")
    field(SDIS, "$(P)DISABLE")
    field(EGU, "degree")
	field(PREC, 3)
    info(INTEREST, "MEDIUM")
    info(archive, "VAL")
}   

record(ao, "$(P)HOMEANG:SP") {
    field(DESC, "Home Angle Setpoint")
    field(DTYP, "asynFloat64")
    field(OUT, "@asyn($(CHOP)homeangspw,0)FLOAT32_LE")
    field(SIML, "$(P)SIM")
    field(SIOL, "$(P)SIM:HOMEANG")
    field(SDIS, "$(P)DISABLE")
    field(EGU, "degree")
	field(PREC, 3)
    info(INTEREST, "MEDIUM")
    info(archive, "VAL")
} 

#--------------------------------------------------
# Parking

# When OK to park (i.e. only determine parked position when stopped)
# Read shaft angle
# Compare with both raw OPEN and CLOSED positions
# Set output value accordingly (OPEN,CLOSED,UNKNOWN)

# If PARK:OK = 1
#   If ( OPEN-1 < SHAFTANGLE < OPEN+1 )
#       Set PARK:POSN = OPEN
#   ElseIf ( CLOSED-1 < SHAFTANGLE < CLOSED+1 )
#       Set PARK:POSN = CLOSED
#   Else
#       Set PARK:POSN = UNKNOWN
#   Endif
# Endif

# Original version of calculation.  Doesn't take into account "wrapping" of angles around 0 deg.
#record(calc, "$(P)PARK:POSN:CALC") {
#    field(DESC, "Calculate parked position")
#    field(SCAN, "Passive")
#    field(INPA, "$(P)SHAFTANG CP")
#    field(INPB, "$(P)PARK:POSN:SP.ZRVL")
#    field(INPC, "$(P)PARK:POSN:SP.ONVL")
#    field(CALC, "(A>B-1 && A<B+1)?0:((A>C-1 && A<C+1)?1:2)")
#   field(FLNK, "$(P)PARK:POSN:FWD")
#    info(INTEREST, "LOW")
##    info(archive, "VAL")
#}

# Shaftangle is in the range 0-360 deg.
# Formula for minimum distance between two angles is:
# delta_temp = abs(alpha - beta) % 360
# If (delta_temp > 180)
#	delta_final = 360 - delta_temp
# Else
# 	delta_final = delta_temp
# Endif

# This dfanout makes absolutely sure that the calc
# records are working on the same value of SHAFTANG
record(dfanout, "$(P)SHAFTANG:FAN") {
	field(OMSL, "closed_loop")
	field(DOL, "$(P)SHAFTANG CP")
	field(OUTA, "$(P)SHAFTANG:DIFF:OPN1.A PP")
	field(OUTB, "$(P)SHAFTANG:DIFF:CLS1.A PP")
	field(FLNK, "$(P)PARK:POSN:CALC")
}

# CALC multiplies/divides by 1000 not to lose decimals of difference
record(calcout, "$(P)SHAFTANG:DIFF:OPN1") {
	field(DESC, "Diff to OPEN pos - part 1")
	field(INPB, "$(P)PARK:POSN:SP.ZRVL")
	field(CALC, "((ABS(A-B)*1000)%(360*1000))/1000")
	field(OUT, "$(P)SHAFTANG:DIFF:OPN.A PP")
}

record(calc, "$(P)SHAFTANG:DIFF:OPN") {
	field(DESC, "Diff to OPEN pos - part 2")
	field(CALC, "A>180 ? 360-A : A")
}

# CALC multiplies/divides by 1000 not to lose decimals of difference
record(calcout, "$(P)SHAFTANG:DIFF:CLS1") {
	field(DESC, "Diff to CLOSED pos - part 1")
	field(INPB, "$(P)PARK:POSN:SP.ONVL")
	field(CALC, "((ABS(A-B)*1000)%(360*1000))/1000")
	field(OUT, "$(P)SHAFTANG:DIFF:CLS.A PP")
}

record(calc, "$(P)SHAFTANG:DIFF:CLS") {
	field(DESC, "Diff to CLOSED pos - part 2")
	field(CALC, "A>180 ? 360-A : A")
}

# CALC actually calculates where shaft is
record(calc, "$(P)PARK:POSN:CALC") {
    field(DESC, "Calculate parked position")
    field(SCAN, "Passive")
    field(INPA, "$(P)SHAFTANG:DIFF:OPN")
    field(INPB, "$(P)SHAFTANG:DIFF:CLS")
	field(CALC, "A<1 ? 0 :(B<1 ? 1 : 2)")
    field(FLNK, "$(P)PARK:POSN:FWD")
    info(INTEREST, "LOW")
#    info(archive, "VAL")
}

record(calcout, "$(P)PARK:POSN:FWD") {
    field(DESC, "Decide if parked position relevant")
    field(SCAN, "Passive")
    field(INPA, "$(P)PARK:OK")
    field(INPB, "$(P)PARK:POSN:CALC")
    field(CALC, "A")
    field(OOPT, "When Non-zero")
    field(DOPT, "Use OCAL")
    field(OCAL, "B")
    field(OUT, "$(P)PARK:POSN PP")
    info(INTEREST, "LOW")
#    info(archive, "VAL")    
}

record(mbbi, "$(P)PARK:POSN") {
    field(DESC, "Parked Position")
    field(SCAN, "Passive")
    field(ZRVL, "0")
    field(ONVL, "1")
    field(TWVL, "2")
    field(ZRST, "OPEN")
    field(ONST, "CLOSED")
    field(TWST, "UNKNOWN")
    info(INTEREST, "HIGH")
    info(archive, "VAL")
}

record(mbbo, "$(P)PARK:POSN:SP") {
    field(DESC, "Parking Position Setpoint")
    field(DTYP, "Soft Channel")
    field(ZRST, "OPEN")
	field(ONST, "CLOSED")
	field(ZRVL, "$(OPEN)")
	field(ONVL, "$(CLOSED)")
    info(INTEREST, "HIGH")
    info(archive, "VAL")
} 

# "OK to park" indicator.
# If state "idle" or "levitated" and frequency 0, set output to 1 (OK to park)
# Otherwise output is 0 (NOT OK to park).
# Provides value for OPI to display to user or (en/dis)able park buttons
record(calc, "$(P)PARK:OK") {
	field(DESC, "OK to Park")
    field(SCAN, "Passive")
	field(INPA, "$(P)STATE.RVAL CP")
    field(INPB, "$(P)FREQ CP")
# Following two lines include calculation to check whether or not shaft has settled at initial park position of 330deg
#    field(INPC, "$(P)SHAFTANG CP")
#    field(CALC, "(A==10) && (B==0) && (ABS(C-330) < 1) ? 1 : 0")
    field(CALC, "(A==3 || A==10) && (B==0) ? 1 : 0")    
# Following fields not applicable to CALC record (See comment above for explanation of values)
#    field(ZNAM, "NO")
#    field(ONAM, "YES")
    info(INTEREST, "HIGH")
    info(archive, "VAL")
}

# Park chopper OPEN or CLOSED (if PARK:OK true)
record(calcout, "$(P)PARK") {
	field(DESC, "Park chopper OPEN or CLOSED")
    field(SCAN, "Passive")
	field(INPA, "$(P)PARK:OK")
    field(INPB, "$(P)PARK:POSN:SP.RVAL")
	field(CALC, "A = 1 ? 1 : 0")
	field(OCAL, "B")
    field(OOPT, "When Non-zero")
    field(DOPT, "Use OCAL")
    field(OUT, "$(P)HOMEANG:SP PP")
    info(INTEREST, "MEDIUM")
    info(archive, "VAL")
}

record(seq, "$(P)PARK_OPEN") {
	field(DESC, "Park OPEN sequence")
	field(DO1, "$(OPEN)")
	field(LNK1, "$(P)PARK:POSN:SP.RVAL PP")
	field(DLY2, "0.5")
	field(DO2, "1")
	field(LNK2, "$(P)PARK.PROC")
	info(INTEREST, "HIGH")
    info(archive, "VAL")
}

record(seq, "$(P)PARK_CLOSED") {
	field(DESC, "Park CLOSED sequence")
	field(DO1, "$(CLOSED)")
	field(LNK1, "$(P)PARK:POSN:SP.RVAL PP")
	field(DLY2, "0.5")
	field(DO2, "1")
	field(LNK2, "$(P)PARK.PROC")
	info(INTEREST, "HIGH")
    info(archive, "VAL")
}

# T0 chopper custom parking sequences:

record(seq, "$(P)PARK_OPEN_T0") {
	field(DESC, "Park OPEN sequence for T0")
	field(DLY1, "0")
    field(DO1, "1")
	field(LNK1, "$(P)STOP_IDLE.PROC")
    field(DLY2, "1.0")
    field(DO2, "$(OPEN)")
	field(LNK2, "$(P)PARK:POSN:SP.RVAL PP")
	field(DLY3, "0.5")
	field(DO3, "1")
	field(LNK3, "$(P)PARK.PROC")
	info(INTEREST, "HIGH")
    info(archive, "VAL")
}

record(seq, "$(P)PARK_CLOSED_T0") {
	field(DESC, "Park CLOSED sequence for T0")
    field(DLY1, "0")
    field(DO1, "1")
	field(LNK1, "$(P)STOP_IDLE.PROC")
    field(DLY2, "1.0")
    field(DO2, "$(CLOSED)")
	field(LNK2, "$(P)PARK:POSN:SP.RVAL PP")
	field(DLY3, "0.5")
	field(DO3, "1")
	field(LNK3, "$(P)PARK.PROC")
	info(INTEREST, "HIGH")
    info(archive, "VAL")
}	

#--------------------------------------------------
# Direction

record(bi, "$(P)DIR") {
    field(DESC, "Spin Direction")
    field(DTYP, "asynInt32")
    field(INP, "@asyn($(CHOP)rdir,0)INT16")
    field(SCAN, "I/O Intr")
    field(SIML, "$(P)SIM")
    field(SIOL, "$(P)SIM:DIR")
    field(SDIS, "$(P)DISABLE")
	field(ZNAM, "CW")
	field(ONAM, "CCW")
    info(INTEREST, "HIGH")
    info(archive, "VAL")
}   

# direction should not be changed
#record(bo, "$(P)DIR:SP") {
#    field(DESC, "Spin Direction Setpoint")
#    field(DTYP, "asynInt32")
#    field(OUT, "@asyn($(CHOP)rdirw,0)INT16")
#    field(SIML, "$(P)SIM")
#    field(SIOL, "$(P)SIM:DIR")
#    field(SDIS, "$(P)DISABLE")
#	field(ZNAM, "CW")
#	field(ONAM, "CCW")
#    info(INTEREST, "HIGH")
#    info(archive, "VAL")
#} 

#--------------------------------------------------
# Frequency and Speed

# actually in .1 Hz units
record(longin, "$(P)SPEED") {
    field(DESC, "Rotor Speed")
    field(DTYP, "asynInt32")
    field(INP, "@asyn($(CHOP)rspeed,0)UINT16")
    field(SCAN, "I/O Intr")
    field(EGU, "Hz")
    field(SIML, "$(P)SIM")
    field(SIOL, "$(P)SIM:SPEED")
    field(SDIS, "$(P)DISABLE")
    info(INTEREST, "MEDIUM")
    info(archive, "VAL")
}   

record(ai, "$(P)FREQ") {
    field(DESC, "Chopper Frequency")
    field(DTYP, "asynFloat64")
    field(INP, "@asyn($(CHOP)freq,0)FLOAT32_LE")
    field(SCAN, "I/O Intr")
    field(EGU, "Hz")
    field(PREC, "3")
    field(SIML, "$(P)SIM")
    field(SIOL, "$(P)SIM:FREQ")
    field(SDIS, "$(P)DISABLE")
    info(INTEREST, "HIGH")
    info(archive, "VAL")
}   

record(ao, "$(P)FREQ:SP") {
    field(DESC, "Chopper Frequency Setpoint")
    field(DTYP, "asynFloat64")
    field(OUT, "@asyn($(CHOP)freqw,0)FLOAT32_LE")
    field(EGU, "Hz")
    field(PREC, "3")
    field(SIML, "$(P)SIM")
    field(SIOL, "$(P)SIM:FREQ")
    field(SDIS, "$(P)DISABLE")
    info(INTEREST, "HIGH")
    info(archive, "VAL")
}  

#--------------------------------------------------
# Phase (delay)

# Phase returned in nanoseconds
record(longin, "$(P)_PHASNS") {
    field(DESC, "Reference Delay (ns)")
    field(DTYP, "asynInt32")
    field(INP, "@asyn($(CHOP)phas,0)INT32_LE")
    field(SCAN, "I/O Intr")
    field(EGU, "ns")
    field(SIML, "$(P)SIM")
    field(SIOL, "$(P)SIM:PHAS")
    field(SDIS, "$(P)DISABLE")
    field(FLNK, "$(P)PHAS")
    info(INTEREST, "LOW")
    info(archive, "VAL")
}   

# Convert phase to microseconds and add "Phase Accuracy"
# for true representation of current Phase
record(calc, "$(P)PHAS") {
	field(DESC, "Reference Delay + Accuracy (us)")
    field(SCAN, "Passive")
	field(INPA, "$(P)_PHASNS")
    field(INPB, "$(P)PHASE_ACC")
	field(CALC, "(A / 1000) + B")
    field(PREC, 3)
    field(EGU, "us")
    info(INTEREST, "HIGH")
    info(archive, "VAL")
}

record(longout, "$(P)PHAS:SP") {
    field(DTYP, "Soft Channel")
    field(DESC, "Reference Delay Setpoint (us)")
    field(EGU, "us")
    field(FLNK, "$(P)_PHASCALC:SP")
    info(INTEREST, "HIGH")
    info(archive, "VAL")
}  

# Convert phase setpoint to nanoseconds then pass to write PV
record(calcout, "$(P)_PHASCALC:SP") {
	field(DESC, "Reference Delay (us)")
    field(SCAN, "Passive")
	field(INPA, "$(P)PHAS:SP")
	field(CALC, "(A * 1000)")
    field(PREC, 0)
    field(EGU, "us")
    field(OUT, "$(P)_PHASNS:SP.VAL PP")
    info(INTEREST, "LOW")
    info(archive, "VAL")
}

# Write phase in nanoseconds
record(longout, "$(P)_PHASNS:SP") {
    field(DESC, "Reference Delay Setpoint (hardware)")
    field(DTYP, "asynInt32")
    field(OUT, "@asyn($(CHOP)phasw,0)INT32_LE")
    field(EGU, "ns")
    field(SIML, "$(P)SIM")
    field(SIOL, "$(P)SIM:PHAS")
    field(SDIS, "$(P)DISABLE")
    info(INTEREST, "HIGH")
    info(archive, "VAL")
}  

# Phase Error returned in nanoseconds
record(longin, "$(P)_PHAS_ERRNS") {
    field(DESC, "Veto Window (ns)")
    field(DTYP, "asynInt32")
    field(INP, "@asyn($(CHOP)phaserr,0)INT32_LE")
    field(SCAN, "I/O Intr")
    field(EGU, "ns")
    field(SIML, "$(P)SIM")
    field(SIOL, "$(P)SIM:PHAS")
    field(SDIS, "$(P)DISABLE")
    field(FLNK, "$(P)PHAS_ERR")
    info(INTEREST, "HIGH")
    info(archive, "VAL")
}   

# Convert phase error to microseconds
record(calc, "$(P)PHAS_ERR") {
	field(DESC, "Veto Window (us)")
    field(SCAN, "Passive")
	field(INPA, "$(P)_PHAS_ERRNS")
	field(CALC, "(A / 1000)")
    field(PREC, 3)
    field(EGU, "us")
    info(INTEREST, "HIGH")
    info(archive, "VAL")
}

record(longout, "$(P)PHAS_ERR:SP") {
    field(DESC, "Veto Window Setpoint (us)")
    field(DTYP, "Soft Channel")
    field(EGU, "us")
    field(FLNK, "$(P)_PHAS_ERRCALC:SP")
    info(INTEREST, "HIGH")
    info(archive, "VAL")
}  

# Convert phase error setpoint to nanoseconds then pass to write PV
record(calcout, "$(P)_PHAS_ERRCALC:SP") {
	field(DESC, "Veto Window (us)")
    field(SCAN, "Passive")
	field(INPA, "$(P)PHAS_ERR:SP")
	field(CALC, "(A * 1000)")
    field(PREC, 3)
    field(EGU, "us")
    field(OUT, "$(P)_PHAS_ERRNS:SP.VAL PP")
    info(INTEREST, "LOW")
    info(archive, "VAL")
}

# Write phase in nanoseconds
record(longout, "$(P)_PHAS_ERRNS:SP") {
    field(DESC, "Veto Window Setpoint (hardware)")
    field(DTYP, "asynInt32")
    field(OUT, "@asyn($(CHOP)phaserrw,0)INT32_LE")
    field(EGU, "ns")
    field(SIML, "$(P)SIM")
    field(SIOL, "$(P)SIM:PHAS")
    field(SDIS, "$(P)DISABLE")
    info(INTEREST, "HIGH")
    info(archive, "VAL")
}  

record(ai, "$(P)PHAS:DEG") {
    field(DESC, "Reference Delay")
    field(DTYP, "asynFloat64")
    field(INP, "@asyn($(CHOP)phasd,0)FLOAT32_LE")
    field(SCAN, "I/O Intr")
    field(EGU, "degree")
    field(SIML, "$(P)SIM")
    field(SIOL, "$(P)SIM:PHAS:DEG")
    field(SDIS, "$(P)DISABLE")
    field(PREC, "3")
    info(INTEREST, "MEDIUM")
    info(archive, "VAL")
}   

record(ao, "$(P)PHAS:DEG:SP") {
    field(DESC, "Reference Delay Setpoint")
    field(DTYP, "asynFloat64")
    field(OUT, "@asyn($(CHOP)phasdw,0)FLOAT32_LE")
    field(EGU, "degree")
    field(SIML, "$(P)SIM")
    field(SIOL, "$(P)SIM:PHAS:DEG")
    field(SDIS, "$(P)DISABLE")
    field(PREC, "3")
    info(INTEREST, "MEDIUM")
    info(archive, "VAL")
}   

record(ai, "$(P)PHAS_ERR:DEG") {
    field(DESC, "Veto Window")
    field(DTYP, "asynFloat64")
    field(INP, "@asyn($(CHOP)phaserrd,0)FLOAT32_LE")
    field(SCAN, "I/O Intr")
    field(EGU, "degree")
    field(SIML, "$(P)SIM")
    field(SIOL, "$(P)SIM:PHAS_ERR:DEG")
    field(SDIS, "$(P)DISABLE")
    field(PREC, "3")
    info(INTEREST, "MEDIUM")
    info(archive, "VAL")
}  

record(ai, "$(P)PHASE_OK") {
    field(DESC, "Phase % OK")
    field(DTYP, "asynFloat64")
    field(INP, "@asyn($(CHOP)phaseok,0)FLOAT32_LE")
    field(SCAN, "I/O Intr")
    field(EGU, "%")
    field(PREC, "3")
    field(SIML, "$(P)SIM")
    field(SIOL, "$(P)SIM:PHASE_OK")
    field(SDIS, "$(P)DISABLE")
    info(INTEREST, "HIGH")
    info(archive, "VAL")
}

# Phase Accuracy in seconds
record(ai, "$(P)_PHASE_ACC_S") {
    field(DESC, "Phase Accuracy")
    field(DTYP, "asynFloat64")
    field(INP, "@asyn($(CHOP)phaseacc,0)FLOAT32_LE")
    field(SCAN, "I/O Intr")
    field(EGU, "s")
    field(PREC, "3")
    field(FLNK, "$(P)PHASE_ACC")
    field(SIML, "$(P)SIM")
    field(SIOL, "$(P)SIM:PHASE_ACC")
    field(SDIS, "$(P)DISABLE")
    info(INTEREST, "LOW")
    info(archive, "VAL")
}

# Convert Phase Accuracy to microseconds
record(calc, "$(P)PHASE_ACC") {
	field(DESC, "Phase Accuracy")
    field(SCAN, "Passive")
	field(INPA, "$(P)_PHASE_ACC_S")
	field(CALC, "(A * 1000000)")
    field(PREC, 3)
    field(EGU, "us")
    info(INTEREST, "HIGH")
    info(archive, "VAL")
}

# Phase Repeatability in seconds
record(ai, "$(P)_PHASE_REP_S") {
    field(DESC, "Phase Repeatability")
    field(DTYP, "asynFloat64")
    field(INP, "@asyn($(CHOP)phaserep,0)FLOAT32_LE")
    field(SCAN, "I/O Intr")
    field(EGU, "s")
    field(PREC, "3")
    field(FLNK, "$(P)PHASE_REP")
    field(SIML, "$(P)SIM")
    field(SIOL, "$(P)SIM:PHASE_REP")
    field(SDIS, "$(P)DISABLE")
    info(INTEREST, "LOW")
    info(archive, "VAL")
}

# Convert Phase Repeatability to microseconds
record(calc, "$(P)PHASE_REP") {
	field(DESC, "Phase Accuracy (us)")
    field(SCAN, "Passive")
	field(INPA, "$(P)_PHASE_REP_S")
	field(CALC, "(A * 1000000)")
    field(PREC, 3)
    field(EGU, "us")
    info(INTEREST, "HIGH")
    info(archive, "VAL")
}

#--------------------------------------------------
# Ready

# Provides binary READY indicator based on state of controller.
# If at least "Idle", then classed as ready to run.
record(calcout, "$(P)_READY:CALC") {
	field(DESC, "Controller Ready State Calc")
    field(SCAN, ".1 second")
	field(INPA, "$(P)STATE.RVAL")
	field(CALC, "(A >= 3)")
    field(OUT, "$(P)READY PP")
    info(INTEREST, "MEDIUM")
    info(archive, "VAL")
}

record(bi, "$(P)READY") {
    field(DESC, "Controller Ready")
    field(DTYP, "Soft Channel")
    field(ZNAM, "NO")
	field(ONAM, "YES")
    info(INTEREST, "HIGH")
    info(archive, "VAL")
} 

#--------------------------------------------------
# Veto

record(longin, "$(P)VETO:COUNTS") {
    field(DESC, "Veto Counts")
    field(DTYP, "asynInt32")
    field(INP, "@asyn($(CHOP)vetocts,0)INT32_LE")
    field(SCAN, "I/O Intr")
    field(EGU, "count")
    field(SIML, "$(P)SIM")
    field(SIOL, "$(P)SIM:VETO")
    field(SDIS, "$(P)DISABLE")
    info(INTEREST, "HIGH")
    info(archive, "VAL")
}

record(longin, "$(P)_VETO:COUNTS:PREV") {
   field(DESC, "Previous value of veto counts")
   field(INP, "$(P)_VETO:CALC.A")
   field(EGU, "count")
   info(INTEREST, "LOW")
}

# Compares current with previous VETO:COUNTS value
record(calcout, "$(P)_VETO:CALC") {
   field(SCAN, ".5 second")
   field(INPA, "$(P)VETO:COUNTS")
   field(INPB, "$(P)_VETO:COUNTS:PREV")
   field(CALC, "A > B")
   field(OUT, "$(P)VETO PP")
   field(FLNK, "$(P)_VETO:COUNTS:PREV")
}

record(bi, "$(P)VETO") {
   field(DESC, "Is VETO:COUNTS increasing or not")
   field(DTYP, "Soft Channel")
   field(ZNAM, "NOT INCREASING")
   field(ONAM, "INCREASING")
   info(INTEREST, "HIGH")
   info(archive, "VAL")
}

#--------------------------------------------------
# Control

# Start command sequence 
record(seq, "$(P)START") {
	field(DESC, "Chopper start sequence")
	field(DO1, "0")
	field(LNK1, "$(P)START_CMD PP")
	field(DLY2, "0.5")
	field(DO2, "1")
	field(LNK2, "$(P)START_CMD PP")
	field(DLY3, "0.5")
	field(DO3, "0")
	field(LNK3, "$(P)START_CMD PP")
	info(INTEREST, "HIGH")
    info(archive, "VAL")    
}

# Start chopper
record(bo, "$(P)START_CMD") {
    field(DESC, "Start chopper")
    field(DTYP, "asynInt32")
    field(OUT, "@asyn($(CHOP)start,0)UINT16")
    field(SIML, "$(P)SIM")
    field(SIOL, "$(P)SIM:START")
    field(SDIS, "$(P)DISABLE")
    field(ZNAM, "")
    field(ONAM, "START")
	info(INTEREST, "LOW")
    info(archive, "VAL")
}   

# stop and delevitate rotor
# not used as better to remain levitated (except for T0 homing routine)
# set frequency to 0 instead (see below)
# Stop & delevitate chopper (Modbus 'Run Off' command)
record(bo, "$(P)STOP_IDLE") {
    field(DESC, "Stop and delevitate chopper")
    field(DTYP, "asynInt32")
    field(OUT, "@asyn($(CHOP)stop,0)UINT16")
    field(VAL, "1")
    field(SIML, "$(P)SIM")
    field(SIOL, "$(P)SIM:STOP")
    field(SDIS, "$(P)DISABLE")
    field(ZNAM, "")
    field(ONAM, "STOP")
	info(INTEREST, "LOW")
    info(archive, "VAL")    
}

record(seq, "$(P)STOP") {
	field(DESC, "Chopper stop sequence")
	field(DO1, "0")
	field(LNK1, "$(P)STOP_CMD PP")
	field(DLY2, "0.5")
	field(DO2, "1")
	field(LNK2, "$(P)STOP_CMD PP")
	field(DLY3, "0.5")
	field(DO3, "0")
	field(LNK3, "$(P)STOP_CMD PP")
	info(INTEREST, "HIGH")
    info(archive, "VAL")    
}

record(bo, "$(P)STOP_CMD") {
    field(DESC, "Stop Chopper")
    field(DTYP, "Soft Channel")
    field(FLNK, "$(P)_HOMEANGSTOP")
    field(ZNAM, "")
    field(ONAM, "STOP")
    info(INTEREST, "MEDIUM")
	info(archive, "VAL")    
}

# need to set HOMEANG to 330 before stopping
# go to 330deg first for T0, but OK for other choppers.
record(ao, "$(P)_HOMEANGSTOP") {
    field(DESC, "Parking Angle 330")
    field(DTYP, "Soft Channel")
    field(OUT, "$(P)HOMEANG:SP PP")    
    field(VAL, "330")
    field(EGU, "degree")
	field(PREC, 3)
    field(FLNK, "$(P)_ZEROFREQ")
	info(INTEREST, "LOW")
    info(archive, "VAL")    
} 

# Sets frequency to 0 to leave rotor levitated
record(ao, "$(P)_ZEROFREQ") {
    field(DESC, "Set frequency to 0Hz")
    field(DTYP, "Soft Channel")
    field(OUT, "$(P)FREQ:SP PP")    
    field(VAL, "0")
    field(EGU, "Hz")
	field(PREC, 3)
	info(INTEREST, "LOW")
    info(archive, "VAL")    
} 

record(seq, "$(P)RESET") {
	field(DESC, "Chopper reset sequence")
	field(DO1, "0")
	field(LNK1, "$(P)RESET_CMD PP")
	field(DLY2, "0.5")
	field(DO2, "1")
	field(LNK2, "$(P)RESET_CMD PP")
	field(DLY3, "0.5")
	field(DO3, "0")
	field(LNK3, "$(P)RESET_CMD PP")
	info(INTEREST, "HIGH")
	info(archive, "VAL")    
}

# Reset warning and/or trip condition (Modbus 'Clear Alarms' command)
record(bo, "$(P)RESET_CMD") {
    field(DESC, "Reset warn and/or trip condition")
    field(DTYP, "asynInt32")
    field(OUT, "@asyn($(CHOP)reset,0)UINT16")
    field(SIML, "$(P)SIM")
    field(SIOL, "$(P)SIM:RESET")
    field(SDIS, "$(P)DISABLE")
    field(ZNAM, "")
    field(ONAM, "RESET")
	info(INTEREST, "LOW")
    info(archive, "VAL")    
}

#--------------------------------------------------
# Testing and diagnostics

record(longin, "$(P)YEAR") {
    field(DESC, "Year in Chopper Memory")
    field(DTYP, "asynInt32")
    field(INP, "@asyn($(CHOP)ctime,0)UINT16")
    field(SCAN, "I/O Intr")
    field(EGU, "")
    field(SIML, "$(P)SIM")
    field(SIOL, "$(P)SIM:YEAR")
    field(SDIS, "$(P)DISABLE")
}   

record(longin, "$(P)MONTH") {
    field(DESC, "Month in Chopper Memory")
    field(DTYP, "asynInt32")
    field(INP, "@asyn($(CHOP)ctime,1)UINT16")
    field(SCAN, "I/O Intr")
    field(EGU, "")
    field(SIML, "$(P)SIM")
    field(SIOL, "$(P)SIM:MONTH")
    field(SDIS, "$(P)DISABLE")
}   

record(longin, "$(P)DAY") {
    field(DESC, "Day in Chopper Memory")
    field(DTYP, "asynInt32")
    field(INP, "@asyn($(CHOP)ctime,2)UINT16")
    field(SCAN, "I/O Intr")
    field(EGU, "")
    field(SIML, "$(P)SIM")
    field(SIOL, "$(P)SIM:DAY")
    field(SDIS, "$(P)DISABLE")
}   

record(longin, "$(P)TIME") {
    field(DESC, "Seconds since Midnight")
    field(DTYP, "asynInt32")
    field(INP, "@asyn($(CHOP)ctime,3)INT32_BE")
    field(SCAN, "I/O Intr")
    field(EGU, "s")
    field(SIML, "$(P)SIM")
    field(SIOL, "$(P)SIM:TIME")
    field(SDIS, "$(P)DISABLE")
}   

#--------------------------------------------------
# Simulation

record(bo, "$(P)SIM")
{
    field(SCAN, "Passive")
    field(DTYP, "Soft Channel")
    field(ZNAM, "NO")
    field(ONAM, "YES")
}

record(bo, "$(P)DISABLE") 
{
    field(DESC, "Disable comms")
    field(PINI, "YES")
    field(VAL, "0")
    field(OMSL, "supervisory")
    field(ZNAM, "COMMS ENABLED")
    field(ONAM, "COMMS DISABLED")
}

record(longin, "$(P)SIM:YEAR")
{
    field(SCAN, "Passive")
    field(DTYP, "Soft Channel")
    field(VAL, "2015")
}

record(longin, "$(P)SIM:MONTH")
{
    field(SCAN, "Passive")
    field(DTYP, "Soft Channel")
    field(VAL, "01")
}

record(longin, "$(P)SIM:DAY")
{
    field(SCAN, "Passive")
    field(DTYP, "Soft Channel")
    field(VAL, "01")
}

record(longin, "$(P)SIM:TIME")
{
    field(SCAN, "Passive")
    field(DTYP, "Soft Channel")
}

record(bi, "$(P)SIM:DIR")
{
    field(SCAN, "Passive")
    field(DTYP, "Soft Channel")
}

record(ai, "$(P)SIM:FREQ")
{
    field(SCAN, "Passive")
    field(DTYP, "Soft Channel")
}

record(ai, "$(P)SIM:HOMEANG")
{
    field(SCAN, "Passive")
    field(DTYP, "Soft Channel")
}

record(ai, "$(P)SIM:SHAFTANG")
{
    field(SCAN, "Passive")
    field(DTYP, "Soft Channel")
}

record(longin, "$(P)SIM:SPEED")
{
    field(SCAN, "Passive")
    field(DTYP, "Soft Channel")
}

record(longin, "$(P)SIM:PHAS")
{
    field(SCAN, "Passive")
    field(DTYP, "Soft Channel")
}

record(ai, "$(P)SIM:PHAS:DEG")
{
    field(SCAN, "Passive")
    field(DTYP, "Soft Channel")
}

record(longin, "$(P)SIM:PHAS_ERR")
{
    field(SCAN, "Passive")
    field(DTYP, "Soft Channel")
}

record(ai, "$(P)SIM:PHAS_ERR:DEG")
{
    field(SCAN, "Passive")
    field(DTYP, "Soft Channel")
}

record(longin, "$(P)SIM:VETO")
{
    field(SCAN, "Passive")
    field(DTYP, "Soft Channel")
}

record(ai, "$(P)SIM:READY")
{
    field(SCAN, "Passive")
    field(DTYP, "Soft Channel")
}

record(ai, "$(P)SIM:PHASE_ACC")
{
    field(SCAN, "Passive")
    field(DTYP, "Soft Channel")
}

record(bi, "$(P)SIM:START")
{
    field(SCAN, "Passive")
    field(DTYP, "Soft Channel")
}

record(bi, "$(P)SIM:STOP")
{
    field(SCAN, "Passive")
    field(DTYP, "Soft Channel")
}

record(bi, "$(P)SIM:RESET")
{
    field(SCAN, "Passive")
    field(DTYP, "Soft Channel")
}

record(mbbiDirect, "$(P)SIM:_STATUS")
{
    field(SCAN, "Passive")
    field(DTYP, "Soft Channel")
}
